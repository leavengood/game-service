// Code generated by goa v3.12.4, DO NOT EDIT.
//
// inventory HTTP client CLI support package
//
// Command:
// $ goa gen game-service/design

package client

import (
	"encoding/json"
	"fmt"
	inventory "game-service/gen/inventory"
)

// BuildShowPayload builds the payload for the inventory show endpoint from CLI
// flags.
func BuildShowPayload(inventoryShowID string) (*inventory.ShowPayload, error) {
	var id string
	{
		id = inventoryShowID
	}
	v := &inventory.ShowPayload{}
	v.ID = id

	return v, nil
}

// BuildAddPayload builds the payload for the inventory add endpoint from CLI
// flags.
func BuildAddPayload(inventoryAddBody string) (*inventory.AddPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(inventoryAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Est doloribus sequi qui animi in quia.\",\n      \"item_id\": \"Voluptas et non.\"\n   }'")
		}
	}
	v := &inventory.AddPayload{
		ID:     body.ID,
		ItemID: body.ItemID,
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the inventory remove endpoint from
// CLI flags.
func BuildRemovePayload(inventoryRemoveBody string) (*inventory.RemovePayload, error) {
	var err error
	var body RemoveRequestBody
	{
		err = json.Unmarshal([]byte(inventoryRemoveBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Optio mollitia.\",\n      \"item_id\": \"Harum autem ipsam ratione atque voluptatibus.\"\n   }'")
		}
	}
	v := &inventory.RemovePayload{
		ID:     body.ID,
		ItemID: body.ItemID,
	}

	return v, nil
}
