// Code generated by goa v3.12.4, DO NOT EDIT.
//
// item HTTP client types
//
// Command:
// $ goa gen game-service/design

package client

import (
	item "game-service/gen/item"
	itemviews "game-service/gen/item/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "item" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Name of item
	Name string `form:"name" json:"name" xml:"name"`
	// Description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage the item can do
	Damage uint32 `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing the item can provide
	Healing uint32 `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection the item can provide
	Protection uint32 `form:"protection" json:"protection" xml:"protection"`
}

// UpdateRequestBody is the type of the "item" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Item with updated fields
	Item *ItemRequestBody `form:"item" json:"item" xml:"item"`
}

// ListResponseBody is the type of the "item" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredItemResponse

// ShowResponseBody is the type of the "item" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the item.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of item
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage the item can do
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing the item can provide
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection the item can provide
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "item" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing item
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddNameTakenResponseBody is the type of the "item" service "add" endpoint
// HTTP response body for the "name_taken" error.
type AddNameTakenResponseBody struct {
	// name taken
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name that is not unique
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateNameTakenResponseBody is the type of the "item" service "update"
// endpoint HTTP response body for the "name_taken" error.
type UpdateNameTakenResponseBody struct {
	// name taken
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name that is not unique
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "item" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing item
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveNotFoundResponseBody is the type of the "item" service "remove"
// endpoint HTTP response body for the "not_found" error.
type RemoveNotFoundResponseBody struct {
	// not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing item
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StoredItemResponse is used to define fields on response body types.
type StoredItemResponse struct {
	// ID is the unique id of the item.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of item
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage the item can do
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing the item can provide
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection the item can provide
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// ItemRequestBody is used to define fields on request body types.
type ItemRequestBody struct {
	// Name of item
	Name string `form:"name" json:"name" xml:"name"`
	// Description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage the item can do
	Damage uint32 `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing the item can provide
	Healing uint32 `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection the item can provide
	Protection uint32 `form:"protection" json:"protection" xml:"protection"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "item" service.
func NewAddRequestBody(p *item.Item) *AddRequestBody {
	body := &AddRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Damage:      p.Damage,
		Healing:     p.Healing,
		Protection:  p.Protection,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "item" service.
func NewUpdateRequestBody(p *item.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Item != nil {
		body.Item = marshalItemItemToItemRequestBody(p.Item)
	}
	return body
}

// NewListStoredItemCollectionOK builds a "item" service "list" endpoint result
// from a HTTP "OK" response.
func NewListStoredItemCollectionOK(body ListResponseBody) itemviews.StoredItemCollectionView {
	v := make([]*itemviews.StoredItemView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredItemResponseToItemviewsStoredItemView(val)
	}

	return v
}

// NewShowStoredItemOK builds a "item" service "show" endpoint result from a
// HTTP "OK" response.
func NewShowStoredItemOK(body *ShowResponseBody) *itemviews.StoredItemView {
	v := &itemviews.StoredItemView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v
}

// NewShowNotFound builds a item service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *item.NotFound {
	v := &item.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewAddNameTaken builds a item service add endpoint name_taken error.
func NewAddNameTaken(body *AddNameTakenResponseBody) *item.NameTaken {
	v := &item.NameTaken{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewUpdateNameTaken builds a item service update endpoint name_taken error.
func NewUpdateNameTaken(body *UpdateNameTakenResponseBody) *item.NameTaken {
	v := &item.NameTaken{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewUpdateNotFound builds a item service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *item.NotFound {
	v := &item.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewRemoveNotFound builds a item service remove endpoint not_found error.
func NewRemoveNotFound(body *RemoveNotFoundResponseBody) *item.NotFound {
	v := &item.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateAddNameTakenResponseBody runs the validations defined on
// add_name_taken_response_body
func ValidateAddNameTakenResponseBody(body *AddNameTakenResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateNameTakenResponseBody runs the validations defined on
// update_name_taken_response_body
func ValidateUpdateNameTakenResponseBody(body *UpdateNameTakenResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateRemoveNotFoundResponseBody runs the validations defined on
// remove_not_found_response_body
func ValidateRemoveNotFoundResponseBody(body *RemoveNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStoredItemResponse runs the validations defined on StoredItemResponse
func ValidateStoredItemResponse(body *StoredItemResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Damage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("damage", "body"))
	}
	if body.Healing == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("healing", "body"))
	}
	if body.Protection == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("protection", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 200 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 200, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 200 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 200, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 20, false))
		}
	}
	return
}

// ValidateItemRequestBody runs the validations defined on ItemRequestBody
func ValidateItemRequestBody(body *ItemRequestBody) (err error) {
	if utf8.RuneCountInString(body.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", body.Damage, 0, true))
	}
	if body.Damage > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", body.Damage, 200, false))
	}
	if body.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", body.Healing, 0, true))
	}
	if body.Healing > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", body.Healing, 200, false))
	}
	if body.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", body.Protection, 0, true))
	}
	if body.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", body.Protection, 20, false))
	}
	return
}
