// Code generated by goa v3.12.4, DO NOT EDIT.
//
// item HTTP client CLI support package
//
// Command:
// $ goa gen game-service/design

package client

import (
	"encoding/json"
	"fmt"
	item "game-service/gen/item"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildShowPayload builds the payload for the item show endpoint from CLI
// flags.
func BuildShowPayload(itemShowID string, itemShowView string) (*item.ShowPayload, error) {
	var err error
	var id string
	{
		id = itemShowID
	}
	var view *string
	{
		if itemShowView != "" {
			view = &itemShowView
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []any{"default", "tiny"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &item.ShowPayload{}
	v.ID = id
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the item add endpoint from CLI flags.
func BuildAddPayload(itemAddBody string) (*item.Item, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(itemAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 51,\n      \"description\": \"A magnificent sword which grants the bearer +2 wisdom\",\n      \"healing\": 54,\n      \"name\": \"Sword of Wisdom\",\n      \"protection\": 4\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", body.Damage, 0, true))
		}
		if body.Damage > 200 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", body.Damage, 200, false))
		}
		if body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", body.Healing, 0, true))
		}
		if body.Healing > 200 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", body.Healing, 200, false))
		}
		if body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", body.Protection, 0, true))
		}
		if body.Protection > 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", body.Protection, 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &item.Item{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the item update endpoint from CLI
// flags.
func BuildUpdatePayload(itemUpdateBody string, itemUpdateID string) (*item.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(itemUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"item\": {\n         \"damage\": 154,\n         \"description\": \"A magnificent sword which grants the bearer +2 wisdom\",\n         \"healing\": 39,\n         \"name\": \"Sword of Wisdom\",\n         \"protection\": 14\n      }\n   }'")
		}
		if body.Item == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
		}
		if body.Item != nil {
			if err2 := ValidateItemRequestBody(body.Item); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = itemUpdateID
	}
	v := &item.UpdatePayload{}
	if body.Item != nil {
		v.Item = marshalItemRequestBodyToItemItem(body.Item)
	}
	v.ID = id

	return v, nil
}

// BuildRemovePayload builds the payload for the item remove endpoint from CLI
// flags.
func BuildRemovePayload(itemRemoveID string) (*item.RemovePayload, error) {
	var id string
	{
		id = itemRemoveID
	}
	v := &item.RemovePayload{}
	v.ID = id

	return v, nil
}
