// Code generated by goa v3.12.4, DO NOT EDIT.
//
// front HTTP client types
//
// Command:
// $ goa gen game-service/design

package client

import (
	frontviews "game-service/gen/front/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// ListItemsResponseBody is the type of the "front" service "list-items"
// endpoint HTTP response body.
type ListItemsResponseBody []*StoredItemResponse

// StoredItemResponse is used to define fields on response body types.
type StoredItemResponse struct {
	// ID is the unique id of the item.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of item
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of item
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage the item can do
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing the item can provide
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection the item can provide
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// NewListItemsStoredItemCollectionOK builds a "front" service "list-items"
// endpoint result from a HTTP "OK" response.
func NewListItemsStoredItemCollectionOK(body ListItemsResponseBody) frontviews.StoredItemCollectionView {
	v := make([]*frontviews.StoredItemView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredItemResponseToFrontviewsStoredItemView(val)
	}

	return v
}

// ValidateStoredItemResponse runs the validations defined on StoredItemResponse
func ValidateStoredItemResponse(body *StoredItemResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Damage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("damage", "body"))
	}
	if body.Healing == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("healing", "body"))
	}
	if body.Protection == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("protection", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 200 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 200, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 200 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 200, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 20, false))
		}
	}
	return
}
