// Code generated by goa v3.12.4, DO NOT EDIT.
//
// front HTTP client encoders and decoders
//
// Command:
// $ goa gen game-service/design

package client

import (
	"bytes"
	"context"
	front "game-service/gen/front"
	frontviews "game-service/gen/front/views"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListItemsRequest instantiates a HTTP request object with method and
// path set to call the "front" service "list-items" endpoint
func (c *Client) BuildListItemsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListItemsFrontPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("front", "list-items", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListItemsResponse returns a decoder for responses returned by the
// front list-items endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListItemsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListItemsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("front", "list-items", err)
			}
			p := NewListItemsStoredItemCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := frontviews.StoredItemCollection{Projected: p, View: view}
			if err = frontviews.ValidateStoredItemCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("front", "list-items", err)
			}
			res := front.NewStoredItemCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("front", "list-items", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStoredItemResponseToFrontviewsStoredItemView builds a value of type
// *frontviews.StoredItemView from a value of type *StoredItemResponse.
func unmarshalStoredItemResponseToFrontviewsStoredItemView(v *StoredItemResponse) *frontviews.StoredItemView {
	res := &frontviews.StoredItemView{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		Damage:      v.Damage,
		Healing:     v.Healing,
		Protection:  v.Protection,
	}

	return res
}
