// Code generated by goa v3.12.4, DO NOT EDIT.
//
// character HTTP client CLI support package
//
// Command:
// $ goa gen game-service/design

package client

import (
	"encoding/json"
	"fmt"
	character "game-service/gen/character"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildShowPayload builds the payload for the character show endpoint from CLI
// flags.
func BuildShowPayload(characterShowID string, characterShowView string) (*character.ShowPayload, error) {
	var err error
	var id string
	{
		id = characterShowID
	}
	var view *string
	{
		if characterShowView != "" {
			view = &characterShowView
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []any{"default", "tiny"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &character.ShowPayload{}
	v.ID = id
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the character add endpoint from CLI
// flags.
func BuildAddPayload(characterAddBody string) (*character.Character, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(characterAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"A grizzled wizard with a penchant for mayhem and mead\",\n      \"experience\": 67048,\n      \"health\": 1820,\n      \"name\": \"Arvish the Wise\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", body.Health, 0, true))
		}
		if body.Health > 2000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", body.Health, 2000, false))
		}
		if body.Experience != nil {
			if *body.Experience < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
			}
		}
		if body.Experience != nil {
			if *body.Experience > 100000 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 100000, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &character.Character{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the character update endpoint from
// CLI flags.
func BuildUpdatePayload(characterUpdateBody string, characterUpdateID string) (*character.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(characterUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"character\": {\n         \"description\": \"A grizzled wizard with a penchant for mayhem and mead\",\n         \"experience\": 75930,\n         \"health\": 1104,\n         \"name\": \"Arvish the Wise\"\n      }\n   }'")
		}
		if body.Character == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("character", "body"))
		}
		if body.Character != nil {
			if err2 := ValidateCharacterRequestBody(body.Character); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = characterUpdateID
	}
	v := &character.UpdatePayload{}
	if body.Character != nil {
		v.Character = marshalCharacterRequestBodyToCharacterCharacter(body.Character)
	}
	v.ID = id

	return v, nil
}

// BuildRemovePayload builds the payload for the character remove endpoint from
// CLI flags.
func BuildRemovePayload(characterRemoveID string) (*character.RemovePayload, error) {
	var id string
	{
		id = characterRemoveID
	}
	v := &character.RemovePayload{}
	v.ID = id

	return v, nil
}
