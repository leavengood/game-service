// Code generated by goa v3.12.4, DO NOT EDIT.
//
// character HTTP client types
//
// Command:
// $ goa gen game-service/design

package client

import (
	character "game-service/gen/character"
	characterviews "game-service/gen/character/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "character" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Name of the character
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of health the character has
	Health uint32 `form:"health" json:"health" xml:"health"`
	// Amount of experience the character has
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// UpdateRequestBody is the type of the "character" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// character with updated fields
	Character *CharacterRequestBody `form:"character" json:"character" xml:"character"`
}

// ListResponseBody is the type of the "character" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredCharacterResponse

// ShowResponseBody is the type of the "character" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the character.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the character
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of health the character has
	Health *uint32 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Amount of experience the character has
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "character" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing item
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddNameTakenResponseBody is the type of the "character" service "add"
// endpoint HTTP response body for the "name_taken" error.
type AddNameTakenResponseBody struct {
	// name taken
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name that is not unique
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateNameTakenResponseBody is the type of the "character" service "update"
// endpoint HTTP response body for the "name_taken" error.
type UpdateNameTakenResponseBody struct {
	// name taken
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name that is not unique
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "character" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing item
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveNotFoundResponseBody is the type of the "character" service "remove"
// endpoint HTTP response body for the "not_found" error.
type RemoveNotFoundResponseBody struct {
	// not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing item
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StoredCharacterResponse is used to define fields on response body types.
type StoredCharacterResponse struct {
	// ID is the unique id of the character.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the character
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of health the character has
	Health *uint32 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Amount of experience the character has
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// CharacterRequestBody is used to define fields on request body types.
type CharacterRequestBody struct {
	// Name of the character
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of health the character has
	Health uint32 `form:"health" json:"health" xml:"health"`
	// Amount of experience the character has
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "character" service.
func NewAddRequestBody(p *character.Character) *AddRequestBody {
	body := &AddRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Health:      p.Health,
		Experience:  p.Experience,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "character" service.
func NewUpdateRequestBody(p *character.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Character != nil {
		body.Character = marshalCharacterCharacterToCharacterRequestBody(p.Character)
	}
	return body
}

// NewListStoredCharacterCollectionOK builds a "character" service "list"
// endpoint result from a HTTP "OK" response.
func NewListStoredCharacterCollectionOK(body ListResponseBody) characterviews.StoredCharacterCollectionView {
	v := make([]*characterviews.StoredCharacterView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredCharacterResponseToCharacterviewsStoredCharacterView(val)
	}

	return v
}

// NewShowStoredCharacterOK builds a "character" service "show" endpoint result
// from a HTTP "OK" response.
func NewShowStoredCharacterOK(body *ShowResponseBody) *characterviews.StoredCharacterView {
	v := &characterviews.StoredCharacterView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v
}

// NewShowNotFound builds a character service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *character.NotFound {
	v := &character.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewAddNameTaken builds a character service add endpoint name_taken error.
func NewAddNameTaken(body *AddNameTakenResponseBody) *character.NameTaken {
	v := &character.NameTaken{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewUpdateNameTaken builds a character service update endpoint name_taken
// error.
func NewUpdateNameTaken(body *UpdateNameTakenResponseBody) *character.NameTaken {
	v := &character.NameTaken{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewUpdateNotFound builds a character service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *character.NotFound {
	v := &character.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewRemoveNotFound builds a character service remove endpoint not_found error.
func NewRemoveNotFound(body *RemoveNotFoundResponseBody) *character.NotFound {
	v := &character.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateAddNameTakenResponseBody runs the validations defined on
// add_name_taken_response_body
func ValidateAddNameTakenResponseBody(body *AddNameTakenResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateNameTakenResponseBody runs the validations defined on
// update_name_taken_response_body
func ValidateUpdateNameTakenResponseBody(body *UpdateNameTakenResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateRemoveNotFoundResponseBody runs the validations defined on
// remove_not_found_response_body
func ValidateRemoveNotFoundResponseBody(body *RemoveNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStoredCharacterResponse runs the validations defined on
// StoredCharacterResponse
func ValidateStoredCharacterResponse(body *StoredCharacterResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Health == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("health", "body"))
	}
	if body.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Health != nil {
		if *body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 0, true))
		}
	}
	if body.Health != nil {
		if *body.Health > 2000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 2000, false))
		}
	}
	if body.Experience != nil {
		if *body.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 100000, false))
		}
	}
	return
}

// ValidateCharacterRequestBody runs the validations defined on
// CharacterRequestBody
func ValidateCharacterRequestBody(body *CharacterRequestBody) (err error) {
	if utf8.RuneCountInString(body.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", body.Health, 0, true))
	}
	if body.Health > 2000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", body.Health, 2000, false))
	}
	if body.Experience != nil {
		if *body.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 100000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 100000, false))
		}
	}
	return
}
