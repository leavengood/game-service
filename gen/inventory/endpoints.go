// Code generated by goa v3.12.4, DO NOT EDIT.
//
// inventory endpoints
//
// Command:
// $ goa gen game-service/design

package inventory

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "inventory" service endpoints.
type Endpoints struct {
	Show   goa.Endpoint
	Add    goa.Endpoint
	Remove goa.Endpoint
}

// NewEndpoints wraps the methods of the "inventory" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Show:   NewShowEndpoint(s),
		Add:    NewAddEndpoint(s),
		Remove: NewRemoveEndpoint(s),
	}
}

// Use applies the given middleware to all the "inventory" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Show = m(e.Show)
	e.Add = m(e.Add)
	e.Remove = m(e.Remove)
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "inventory".
func NewShowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ShowPayload)
		return s.Show(ctx, p)
	}
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "inventory".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AddPayload)
		return nil, s.Add(ctx, p)
	}
}

// NewRemoveEndpoint returns an endpoint function that calls the method
// "remove" of service "inventory".
func NewRemoveEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RemovePayload)
		return nil, s.Remove(ctx, p)
	}
}
