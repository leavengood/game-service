// Code generated by goa v3.12.4, DO NOT EDIT.
//
// item gRPC server
//
// Command:
// $ goa gen game-service/design

package server

import (
	"context"
	"errors"
	itempb "game-service/gen/grpc/item/pb"
	item "game-service/gen/item"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the itempb.ItemServer interface.
type Server struct {
	ListH   goagrpc.UnaryHandler
	ShowH   goagrpc.UnaryHandler
	AddH    goagrpc.UnaryHandler
	UpdateH goagrpc.UnaryHandler
	RemoveH goagrpc.UnaryHandler
	itempb.UnimplementedItemServer
}

// New instantiates the server struct with the item service endpoints.
func New(e *item.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		ListH:   NewListHandler(e.List, uh),
		ShowH:   NewShowHandler(e.Show, uh),
		AddH:    NewAddHandler(e.Add, uh),
		UpdateH: NewUpdateHandler(e.Update, uh),
		RemoveH: NewRemoveHandler(e.Remove, uh),
	}
}

// NewListHandler creates a gRPC handler which serves the "item" service "list"
// endpoint.
func NewListHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeListResponse)
	}
	return h
}

// List implements the "List" method in itempb.ItemServer interface.
func (s *Server) List(ctx context.Context, message *itempb.ListRequest) (*itempb.StoredItemCollection, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "list")
	ctx = context.WithValue(ctx, goa.ServiceKey, "item")
	resp, err := s.ListH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.StoredItemCollection), nil
}

// NewShowHandler creates a gRPC handler which serves the "item" service "show"
// endpoint.
func NewShowHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeShowRequest, EncodeShowResponse)
	}
	return h
}

// Show implements the "Show" method in itempb.ItemServer interface.
func (s *Server) Show(ctx context.Context, message *itempb.ShowRequest) (*itempb.ShowResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "show")
	ctx = context.WithValue(ctx, goa.ServiceKey, "item")
	resp, err := s.ShowH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "not_found":
				var er *item.NotFound
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewShowNotFoundError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.ShowResponse), nil
}

// NewAddHandler creates a gRPC handler which serves the "item" service "add"
// endpoint.
func NewAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddRequest, EncodeAddResponse)
	}
	return h
}

// Add implements the "Add" method in itempb.ItemServer interface.
func (s *Server) Add(ctx context.Context, message *itempb.AddRequest) (*itempb.AddResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "add")
	ctx = context.WithValue(ctx, goa.ServiceKey, "item")
	resp, err := s.AddH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "name_taken":
				var er *item.NameTaken
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.AlreadyExists, err, NewAddNameTakenError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.AddResponse), nil
}

// NewUpdateHandler creates a gRPC handler which serves the "item" service
// "update" endpoint.
func NewUpdateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateRequest, EncodeUpdateResponse)
	}
	return h
}

// Update implements the "Update" method in itempb.ItemServer interface.
func (s *Server) Update(ctx context.Context, message *itempb.UpdateRequest) (*itempb.UpdateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "update")
	ctx = context.WithValue(ctx, goa.ServiceKey, "item")
	resp, err := s.UpdateH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "not_found":
				var er *item.NotFound
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewUpdateNotFoundError(er))
			case "name_taken":
				var er *item.NameTaken
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.AlreadyExists, err, NewUpdateNameTakenError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.UpdateResponse), nil
}

// NewRemoveHandler creates a gRPC handler which serves the "item" service
// "remove" endpoint.
func NewRemoveHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRemoveRequest, EncodeRemoveResponse)
	}
	return h
}

// Remove implements the "Remove" method in itempb.ItemServer interface.
func (s *Server) Remove(ctx context.Context, message *itempb.RemoveRequest) (*itempb.RemoveResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "remove")
	ctx = context.WithValue(ctx, goa.ServiceKey, "item")
	resp, err := s.RemoveH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "not_found":
				var er *item.NotFound
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewRemoveNotFoundError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.RemoveResponse), nil
}
