// Code generated by goa v3.12.4, DO NOT EDIT.
//
// item gRPC server types
//
// Command:
// $ goa gen game-service/design

package server

import (
	itempb "game-service/gen/grpc/item/pb"
	item "game-service/gen/item"
	itemviews "game-service/gen/item/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoStoredItemCollection builds the gRPC response type from the result
// of the "list" endpoint of the "item" service.
func NewProtoStoredItemCollection(result itemviews.StoredItemCollectionView) *itempb.StoredItemCollection {
	message := &itempb.StoredItemCollection{}
	message.Field = make([]*itempb.StoredItem, len(result))
	for i, val := range result {
		message.Field[i] = &itempb.StoredItem{
			Id:          *val.ID,
			Name:        *val.Name,
			Description: val.Description,
			Damage:      *val.Damage,
			Healing:     *val.Healing,
			Protection:  *val.Protection,
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the "item"
// service from the gRPC request type.
func NewShowPayload(message *itempb.ShowRequest, view *string) *item.ShowPayload {
	v := &item.ShowPayload{
		ID: message.Id,
	}
	v.View = view
	return v
}

// NewProtoShowResponse builds the gRPC response type from the result of the
// "show" endpoint of the "item" service.
func NewProtoShowResponse(result *itemviews.StoredItemView) *itempb.ShowResponse {
	message := &itempb.ShowResponse{
		Id:          *result.ID,
		Name:        *result.Name,
		Description: result.Description,
		Damage:      *result.Damage,
		Healing:     *result.Healing,
		Protection:  *result.Protection,
	}
	return message
}

// NewShowNotFoundError builds the gRPC error response type from the error of
// the "show" endpoint of the "item" service.
func NewShowNotFoundError(er *item.NotFound) *itempb.ShowNotFoundError {
	message := &itempb.ShowNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "item" service
// from the gRPC request type.
func NewAddPayload(message *itempb.AddRequest) *item.Item {
	v := &item.Item{
		Name:        message.Name,
		Description: message.Description,
		Damage:      message.Damage,
		Healing:     message.Healing,
		Protection:  message.Protection,
	}
	return v
}

// NewProtoAddResponse builds the gRPC response type from the result of the
// "add" endpoint of the "item" service.
func NewProtoAddResponse(result string) *itempb.AddResponse {
	message := &itempb.AddResponse{}
	message.Field = result
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "item"
// service from the gRPC request type.
func NewUpdatePayload(message *itempb.UpdateRequest) *item.UpdatePayload {
	v := &item.UpdatePayload{
		ID: message.Id,
	}
	if message.Item != nil {
		v.Item = protobufItempbItem2ToItemItem(message.Item)
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "item" service.
func NewProtoUpdateResponse() *itempb.UpdateResponse {
	message := &itempb.UpdateResponse{}
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the "item"
// service from the gRPC request type.
func NewRemovePayload(message *itempb.RemoveRequest) *item.RemovePayload {
	v := &item.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "item" service.
func NewProtoRemoveResponse() *itempb.RemoveResponse {
	message := &itempb.RemoveResponse{}
	return message
}

// ValidateAddRequest runs the validations defined on AddRequest.
func ValidateAddRequest(message *itempb.AddRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	if message.Description != nil {
		if utf8.RuneCountInString(*message.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.description", *message.Description, utf8.RuneCountInString(*message.Description), 2000, false))
		}
	}
	if message.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 0, true))
	}
	if message.Damage > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 200, false))
	}
	if message.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 0, true))
	}
	if message.Healing > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 200, false))
	}
	if message.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 0, true))
	}
	if message.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 20, false))
	}
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *itempb.UpdateRequest) (err error) {
	if message.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "message"))
	}
	if message.Item != nil {
		if err2 := ValidateItem2(message.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateItem2 runs the validations defined on Item2.
func ValidateItem2(item *itempb.Item2) (err error) {
	if utf8.RuneCountInString(item.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("item.name", item.Name, utf8.RuneCountInString(item.Name), 100, false))
	}
	if item.Description != nil {
		if utf8.RuneCountInString(*item.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("item.description", *item.Description, utf8.RuneCountInString(*item.Description), 2000, false))
		}
	}
	if item.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.damage", item.Damage, 0, true))
	}
	if item.Damage > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.damage", item.Damage, 200, false))
	}
	if item.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.healing", item.Healing, 0, true))
	}
	if item.Healing > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.healing", item.Healing, 200, false))
	}
	if item.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.protection", item.Protection, 0, true))
	}
	if item.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("item.protection", item.Protection, 20, false))
	}
	return
}

// protobufItempbItem2ToItemItem builds a value of type *item.Item from a value
// of type *itempb.Item2.
func protobufItempbItem2ToItemItem(v *itempb.Item2) *item.Item {
	res := &item.Item{
		Name:        v.Name,
		Description: v.Description,
		Damage:      v.Damage,
		Healing:     v.Healing,
		Protection:  v.Protection,
	}

	return res
}

// svcItemItemToItempbItem2 builds a value of type *itempb.Item2 from a value
// of type *item.Item.
func svcItemItemToItempbItem2(v *item.Item) *itempb.Item2 {
	res := &itempb.Item2{
		Name:        v.Name,
		Description: v.Description,
		Damage:      v.Damage,
		Healing:     v.Healing,
		Protection:  v.Protection,
	}

	return res
}
