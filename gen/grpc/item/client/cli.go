// Code generated by goa v3.12.4, DO NOT EDIT.
//
// item gRPC client CLI support package
//
// Command:
// $ goa gen game-service/design

package client

import (
	"encoding/json"
	"fmt"
	itempb "game-service/gen/grpc/item/pb"
	item "game-service/gen/item"

	goa "goa.design/goa/v3/pkg"
)

// BuildShowPayload builds the payload for the item show endpoint from CLI
// flags.
func BuildShowPayload(itemShowMessage string, itemShowView string) (*item.ShowPayload, error) {
	var err error
	var message itempb.ShowRequest
	{
		if itemShowMessage != "" {
			err = json.Unmarshal([]byte(itemShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Cumque sapiente sapiente quaerat nisi quo eaque.\"\n   }'")
			}
		}
	}
	var view *string
	{
		if itemShowView != "" {
			view = &itemShowView
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []any{"default", "tiny"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &item.ShowPayload{
		ID: message.Id,
	}
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the item add endpoint from CLI flags.
func BuildAddPayload(itemAddMessage string) (*item.Item, error) {
	var err error
	var message itempb.AddRequest
	{
		if itemAddMessage != "" {
			err = json.Unmarshal([]byte(itemAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 85,\n      \"description\": \"A magnificent sword which grants the bearer +2 wisdom\",\n      \"healing\": 42,\n      \"name\": \"Sword of Wisdom\",\n      \"protection\": 15\n   }'")
			}
		}
	}
	v := &item.Item{
		Name:        message.Name,
		Description: message.Description,
		Damage:      message.Damage,
		Healing:     message.Healing,
		Protection:  message.Protection,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the item update endpoint from CLI
// flags.
func BuildUpdatePayload(itemUpdateMessage string) (*item.UpdatePayload, error) {
	var err error
	var message itempb.UpdateRequest
	{
		if itemUpdateMessage != "" {
			err = json.Unmarshal([]byte(itemUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Quae sint sequi est repudiandae magni.\",\n      \"item\": {\n         \"damage\": 54,\n         \"description\": \"A magnificent sword which grants the bearer +2 wisdom\",\n         \"healing\": 154,\n         \"name\": \"Sword of Wisdom\",\n         \"protection\": 19\n      }\n   }'")
			}
		}
	}
	v := &item.UpdatePayload{
		ID: message.Id,
	}
	if message.Item != nil {
		v.Item = protobufItempbItem2ToItemItem(message.Item)
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the item remove endpoint from CLI
// flags.
func BuildRemovePayload(itemRemoveMessage string) (*item.RemovePayload, error) {
	var err error
	var message itempb.RemoveRequest
	{
		if itemRemoveMessage != "" {
			err = json.Unmarshal([]byte(itemRemoveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Sint quos odit at quia officiis esse.\"\n   }'")
			}
		}
	}
	v := &item.RemovePayload{
		ID: message.Id,
	}

	return v, nil
}
