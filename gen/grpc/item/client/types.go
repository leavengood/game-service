// Code generated by goa v3.12.4, DO NOT EDIT.
//
// item gRPC client types
//
// Command:
// $ goa gen game-service/design

package client

import (
	itempb "game-service/gen/grpc/item/pb"
	item "game-service/gen/item"
	itemviews "game-service/gen/item/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoListRequest builds the gRPC request type from the payload of the
// "list" endpoint of the "item" service.
func NewProtoListRequest() *itempb.ListRequest {
	message := &itempb.ListRequest{}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "item"
// service from the gRPC response type.
func NewListResult(message *itempb.StoredItemCollection) itemviews.StoredItemCollectionView {
	result := make([]*itemviews.StoredItemView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &itemviews.StoredItemView{
			ID:          &val.Id,
			Name:        &val.Name,
			Description: val.Description,
			Damage:      &val.Damage,
			Healing:     &val.Healing,
			Protection:  &val.Protection,
		}
	}
	return result
}

// NewProtoShowRequest builds the gRPC request type from the payload of the
// "show" endpoint of the "item" service.
func NewProtoShowRequest(payload *item.ShowPayload) *itempb.ShowRequest {
	message := &itempb.ShowRequest{
		Id: payload.ID,
	}
	return message
}

// NewShowResult builds the result type of the "show" endpoint of the "item"
// service from the gRPC response type.
func NewShowResult(message *itempb.ShowResponse) *itemviews.StoredItemView {
	result := &itemviews.StoredItemView{
		ID:          &message.Id,
		Name:        &message.Name,
		Description: message.Description,
		Damage:      &message.Damage,
		Healing:     &message.Healing,
		Protection:  &message.Protection,
	}
	return result
}

// NewShowNotFoundError builds the error type of the "show" endpoint of the
// "item" service from the gRPC error response type.
func NewShowNotFoundError(message *itempb.ShowNotFoundError) *item.NotFound {
	er := &item.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewProtoAddRequest builds the gRPC request type from the payload of the
// "add" endpoint of the "item" service.
func NewProtoAddRequest(payload *item.Item) *itempb.AddRequest {
	message := &itempb.AddRequest{
		Name:        payload.Name,
		Description: payload.Description,
		Damage:      payload.Damage,
		Healing:     payload.Healing,
		Protection:  payload.Protection,
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "item"
// service from the gRPC response type.
func NewAddResult(message *itempb.AddResponse) string {
	result := message.Field
	return result
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "item" service.
func NewProtoUpdateRequest(payload *item.UpdatePayload) *itempb.UpdateRequest {
	message := &itempb.UpdateRequest{
		Id: payload.ID,
	}
	if payload.Item != nil {
		message.Item = svcItemItemToItempbItem2(payload.Item)
	}
	return message
}

// NewProtoRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "item" service.
func NewProtoRemoveRequest(payload *item.RemovePayload) *itempb.RemoveRequest {
	message := &itempb.RemoveRequest{
		Id: payload.ID,
	}
	return message
}

// ValidateStoredItemCollection runs the validations defined on
// StoredItemCollection.
func ValidateStoredItemCollection(message *itempb.StoredItemCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateStoredItem(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredItem runs the validations defined on StoredItem.
func ValidateStoredItem(elem *itempb.StoredItem) (err error) {
	if utf8.RuneCountInString(elem.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("elem.name", elem.Name, utf8.RuneCountInString(elem.Name), 100, false))
	}
	if elem.Description != nil {
		if utf8.RuneCountInString(*elem.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("elem.description", *elem.Description, utf8.RuneCountInString(*elem.Description), 2000, false))
		}
	}
	if elem.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.damage", elem.Damage, 0, true))
	}
	if elem.Damage > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.damage", elem.Damage, 200, false))
	}
	if elem.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.healing", elem.Healing, 0, true))
	}
	if elem.Healing > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.healing", elem.Healing, 200, false))
	}
	if elem.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.protection", elem.Protection, 0, true))
	}
	if elem.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.protection", elem.Protection, 20, false))
	}
	return
}

// ValidateShowResponse runs the validations defined on ShowResponse.
func ValidateShowResponse(message *itempb.ShowResponse) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	if message.Description != nil {
		if utf8.RuneCountInString(*message.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.description", *message.Description, utf8.RuneCountInString(*message.Description), 2000, false))
		}
	}
	if message.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 0, true))
	}
	if message.Damage > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.damage", message.Damage, 200, false))
	}
	if message.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 0, true))
	}
	if message.Healing > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.healing", message.Healing, 200, false))
	}
	if message.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 0, true))
	}
	if message.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.protection", message.Protection, 20, false))
	}
	return
}

// protobufItempbItem2ToItemItem builds a value of type *item.Item from a value
// of type *itempb.Item2.
func protobufItempbItem2ToItemItem(v *itempb.Item2) *item.Item {
	res := &item.Item{
		Name:        v.Name,
		Description: v.Description,
		Damage:      v.Damage,
		Healing:     v.Healing,
		Protection:  v.Protection,
	}

	return res
}

// svcItemItemToItempbItem2 builds a value of type *itempb.Item2 from a value
// of type *item.Item.
func svcItemItemToItempbItem2(v *item.Item) *itempb.Item2 {
	res := &itempb.Item2{
		Name:        v.Name,
		Description: v.Description,
		Damage:      v.Damage,
		Healing:     v.Healing,
		Protection:  v.Protection,
	}

	return res
}
