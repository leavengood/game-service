// Code generated by goa v3.12.4, DO NOT EDIT.
//
// inventory gRPC client encoders and decoders
//
// Command:
// $ goa gen game-service/design

package client

import (
	"context"
	inventorypb "game-service/gen/grpc/inventory/pb"
	inventory "game-service/gen/inventory"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildShowFunc builds the remote method to invoke for "inventory" service
// "show" endpoint.
func BuildShowFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Show(ctx, reqpb.(*inventorypb.ShowRequest), opts...)
		}
		return grpccli.Show(ctx, &inventorypb.ShowRequest{}, opts...)
	}
}

// EncodeShowRequest encodes requests sent to inventory show endpoint.
func EncodeShowRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*inventory.ShowPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "show", "*inventory.ShowPayload", v)
	}
	return NewProtoShowRequest(payload), nil
}

// DecodeShowResponse decodes responses from the inventory show endpoint.
func DecodeShowResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*inventorypb.ShowResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "show", "*inventorypb.ShowResponse", v)
	}
	res := NewShowResult(message)
	return res, nil
}

// BuildAddFunc builds the remote method to invoke for "inventory" service
// "add" endpoint.
func BuildAddFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*inventorypb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &inventorypb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to inventory add endpoint.
func EncodeAddRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*inventory.AddPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "add", "*inventory.AddPayload", v)
	}
	return NewProtoAddRequest(payload), nil
}

// BuildRemoveFunc builds the remote method to invoke for "inventory" service
// "remove" endpoint.
func BuildRemoveFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*inventorypb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &inventorypb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to inventory remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*inventory.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "remove", "*inventory.RemovePayload", v)
	}
	return NewProtoRemoveRequest(payload), nil
}
