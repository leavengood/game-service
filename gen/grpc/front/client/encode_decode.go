// Code generated by goa v3.12.4, DO NOT EDIT.
//
// front gRPC client encoders and decoders
//
// Command:
// $ goa gen game-service/design

package client

import (
	"context"
	front "game-service/gen/front"
	frontviews "game-service/gen/front/views"
	frontpb "game-service/gen/grpc/front/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildListItemsFunc builds the remote method to invoke for "front" service
// "list-items" endpoint.
func BuildListItemsFunc(grpccli frontpb.FrontClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.ListItems(ctx, reqpb.(*frontpb.ListItemsRequest), opts...)
		}
		return grpccli.ListItems(ctx, &frontpb.ListItemsRequest{}, opts...)
	}
}

// DecodeListItemsResponse decodes responses from the front list-items endpoint.
func DecodeListItemsResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*frontpb.StoredItemCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("front", "list-items", "*frontpb.StoredItemCollection", v)
	}
	res := NewListItemsResult(message)
	vres := frontviews.StoredItemCollection{Projected: res, View: view}
	if err := frontviews.ValidateStoredItemCollection(vres); err != nil {
		return nil, err
	}
	return front.NewStoredItemCollection(vres), nil
}
