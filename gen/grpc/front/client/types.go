// Code generated by goa v3.12.4, DO NOT EDIT.
//
// front gRPC client types
//
// Command:
// $ goa gen game-service/design

package client

import (
	frontviews "game-service/gen/front/views"
	frontpb "game-service/gen/grpc/front/pb"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoListItemsRequest builds the gRPC request type from the payload of
// the "list-items" endpoint of the "front" service.
func NewProtoListItemsRequest() *frontpb.ListItemsRequest {
	message := &frontpb.ListItemsRequest{}
	return message
}

// NewListItemsResult builds the result type of the "list-items" endpoint of
// the "front" service from the gRPC response type.
func NewListItemsResult(message *frontpb.StoredItemCollection) frontviews.StoredItemCollectionView {
	result := make([]*frontviews.StoredItemView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &frontviews.StoredItemView{
			ID:          &val.Id,
			Name:        &val.Name,
			Description: val.Description,
			Damage:      &val.Damage,
			Healing:     &val.Healing,
			Protection:  &val.Protection,
		}
	}
	return result
}

// ValidateStoredItemCollection runs the validations defined on
// StoredItemCollection.
func ValidateStoredItemCollection(message *frontpb.StoredItemCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateStoredItem(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredItem runs the validations defined on StoredItem.
func ValidateStoredItem(elem *frontpb.StoredItem) (err error) {
	if utf8.RuneCountInString(elem.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("elem.name", elem.Name, utf8.RuneCountInString(elem.Name), 100, false))
	}
	if elem.Description != nil {
		if utf8.RuneCountInString(*elem.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("elem.description", *elem.Description, utf8.RuneCountInString(*elem.Description), 2000, false))
		}
	}
	if elem.Damage < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.damage", elem.Damage, 0, true))
	}
	if elem.Damage > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.damage", elem.Damage, 200, false))
	}
	if elem.Healing < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.healing", elem.Healing, 0, true))
	}
	if elem.Healing > 200 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.healing", elem.Healing, 200, false))
	}
	if elem.Protection < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.protection", elem.Protection, 0, true))
	}
	if elem.Protection > 20 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.protection", elem.Protection, 20, false))
	}
	return
}
