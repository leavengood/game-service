// Code generated with goa v3.12.4, DO NOT EDIT.
//
// front protocol buffer definition
//
// Command:
// $ goa gen game-service/design

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: goadesign_goagen_front.proto

package frontpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Front_ListItems_FullMethodName = "/front.Front/ListItems"
)

// FrontClient is the client API for Front service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontClient interface {
	// List all items
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*StoredItemCollection, error)
}

type frontClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontClient(cc grpc.ClientConnInterface) FrontClient {
	return &frontClient{cc}
}

func (c *frontClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*StoredItemCollection, error) {
	out := new(StoredItemCollection)
	err := c.cc.Invoke(ctx, Front_ListItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontServer is the server API for Front service.
// All implementations must embed UnimplementedFrontServer
// for forward compatibility
type FrontServer interface {
	// List all items
	ListItems(context.Context, *ListItemsRequest) (*StoredItemCollection, error)
	mustEmbedUnimplementedFrontServer()
}

// UnimplementedFrontServer must be embedded to have forward compatible implementations.
type UnimplementedFrontServer struct {
}

func (UnimplementedFrontServer) ListItems(context.Context, *ListItemsRequest) (*StoredItemCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedFrontServer) mustEmbedUnimplementedFrontServer() {}

// UnsafeFrontServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontServer will
// result in compilation errors.
type UnsafeFrontServer interface {
	mustEmbedUnimplementedFrontServer()
}

func RegisterFrontServer(s grpc.ServiceRegistrar, srv FrontServer) {
	s.RegisterService(&Front_ServiceDesc, srv)
}

func _Front_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Front_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Front_ServiceDesc is the grpc.ServiceDesc for Front service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Front_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "front.Front",
	HandlerType: (*FrontServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListItems",
			Handler:    _Front_ListItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goadesign_goagen_front.proto",
}
