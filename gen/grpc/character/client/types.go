// Code generated by goa v3.12.4, DO NOT EDIT.
//
// character gRPC client types
//
// Command:
// $ goa gen game-service/design

package client

import (
	character "game-service/gen/character"
	characterviews "game-service/gen/character/views"
	characterpb "game-service/gen/grpc/character/pb"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoListRequest builds the gRPC request type from the payload of the
// "list" endpoint of the "character" service.
func NewProtoListRequest() *characterpb.ListRequest {
	message := &characterpb.ListRequest{}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the
// "character" service from the gRPC response type.
func NewListResult(message *characterpb.StoredCharacterCollection) characterviews.StoredCharacterCollectionView {
	result := make([]*characterviews.StoredCharacterView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &characterviews.StoredCharacterView{
			ID:          &val.Id,
			Name:        &val.Name,
			Description: val.Description,
			Health:      &val.Health,
			Experience:  &val.Experience,
		}
	}
	return result
}

// NewProtoShowRequest builds the gRPC request type from the payload of the
// "show" endpoint of the "character" service.
func NewProtoShowRequest(payload *character.ShowPayload) *characterpb.ShowRequest {
	message := &characterpb.ShowRequest{
		Id: payload.ID,
	}
	return message
}

// NewShowResult builds the result type of the "show" endpoint of the
// "character" service from the gRPC response type.
func NewShowResult(message *characterpb.ShowResponse) *characterviews.StoredCharacterView {
	result := &characterviews.StoredCharacterView{
		ID:          &message.Id,
		Name:        &message.Name,
		Description: message.Description,
		Health:      &message.Health,
		Experience:  &message.Experience,
	}
	return result
}

// NewShowNotFoundError builds the error type of the "show" endpoint of the
// "character" service from the gRPC error response type.
func NewShowNotFoundError(message *characterpb.ShowNotFoundError) *character.NotFound {
	er := &character.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewProtoAddRequest builds the gRPC request type from the payload of the
// "add" endpoint of the "character" service.
func NewProtoAddRequest(payload *character.Character) *characterpb.AddRequest {
	message := &characterpb.AddRequest{
		Name:        payload.Name,
		Description: payload.Description,
		Health:      payload.Health,
		Experience:  payload.Experience,
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "character"
// service from the gRPC response type.
func NewAddResult(message *characterpb.AddResponse) string {
	result := message.Field
	return result
}

// NewAddNameTakenError builds the error type of the "add" endpoint of the
// "character" service from the gRPC error response type.
func NewAddNameTakenError(message *characterpb.AddNameTakenError) *character.NameTaken {
	er := &character.NameTaken{
		Message: message.Message_,
		Name:    message.Name,
	}
	return er
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "character" service.
func NewProtoUpdateRequest(payload *character.UpdatePayload) *characterpb.UpdateRequest {
	message := &characterpb.UpdateRequest{
		Id: payload.ID,
	}
	if payload.Character != nil {
		message.Character = svcCharacterCharacterToCharacterpbCharacter2(payload.Character)
	}
	return message
}

// NewUpdateNotFoundError builds the error type of the "update" endpoint of the
// "character" service from the gRPC error response type.
func NewUpdateNotFoundError(message *characterpb.UpdateNotFoundError) *character.NotFound {
	er := &character.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewUpdateNameTakenError builds the error type of the "update" endpoint of
// the "character" service from the gRPC error response type.
func NewUpdateNameTakenError(message *characterpb.UpdateNameTakenError) *character.NameTaken {
	er := &character.NameTaken{
		Message: message.Message_,
		Name:    message.Name,
	}
	return er
}

// NewProtoRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "character" service.
func NewProtoRemoveRequest(payload *character.RemovePayload) *characterpb.RemoveRequest {
	message := &characterpb.RemoveRequest{
		Id: payload.ID,
	}
	return message
}

// NewRemoveNotFoundError builds the error type of the "remove" endpoint of the
// "character" service from the gRPC error response type.
func NewRemoveNotFoundError(message *characterpb.RemoveNotFoundError) *character.NotFound {
	er := &character.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// ValidateStoredCharacterCollection runs the validations defined on
// StoredCharacterCollection.
func ValidateStoredCharacterCollection(message *characterpb.StoredCharacterCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateStoredCharacter(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredCharacter runs the validations defined on StoredCharacter.
func ValidateStoredCharacter(elem *characterpb.StoredCharacter) (err error) {
	if utf8.RuneCountInString(elem.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("elem.name", elem.Name, utf8.RuneCountInString(elem.Name), 100, false))
	}
	if elem.Description != nil {
		if utf8.RuneCountInString(*elem.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("elem.description", *elem.Description, utf8.RuneCountInString(*elem.Description), 2000, false))
		}
	}
	if elem.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.health", elem.Health, 0, true))
	}
	if elem.Health > 2000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.health", elem.Health, 2000, false))
	}
	if elem.Experience < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.experience", elem.Experience, 0, true))
	}
	if elem.Experience > 100000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("elem.experience", elem.Experience, 100000, false))
	}
	return
}

// ValidateShowResponse runs the validations defined on ShowResponse.
func ValidateShowResponse(message *characterpb.ShowResponse) (err error) {
	if utf8.RuneCountInString(message.Name) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
	}
	if message.Description != nil {
		if utf8.RuneCountInString(*message.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.description", *message.Description, utf8.RuneCountInString(*message.Description), 2000, false))
		}
	}
	if message.Health < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 0, true))
	}
	if message.Health > 2000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", message.Health, 2000, false))
	}
	if message.Experience < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 0, true))
	}
	if message.Experience > 100000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", message.Experience, 100000, false))
	}
	return
}

// protobufCharacterpbCharacter2ToCharacterCharacter builds a value of type
// *character.Character from a value of type *characterpb.Character2.
func protobufCharacterpbCharacter2ToCharacterCharacter(v *characterpb.Character2) *character.Character {
	res := &character.Character{
		Name:        v.Name,
		Description: v.Description,
		Health:      v.Health,
		Experience:  v.Experience,
	}

	return res
}

// svcCharacterCharacterToCharacterpbCharacter2 builds a value of type
// *characterpb.Character2 from a value of type *character.Character.
func svcCharacterCharacterToCharacterpbCharacter2(v *character.Character) *characterpb.Character2 {
	res := &characterpb.Character2{
		Name:        v.Name,
		Description: v.Description,
		Health:      v.Health,
		Experience:  v.Experience,
	}

	return res
}
